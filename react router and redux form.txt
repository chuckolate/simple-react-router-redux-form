redux contains app state, generated by reducers. state is modified by calling action creators which creates actions which flows through the middleware and then into the reducers. whenever new state is produced, it flows into the containers and it re-renders itself. this cycle repeats itself...

1. navigate user around our app (add multiple pages)
2. how to load data from backend api from current route
3. build useful forms with validation

AJAX request from browser to blog post api

GET - get all blog posts
POST - create new blog post and save it
GET - get particular post (with id)
DELETE - delete particular post (with id)

npm install --save react-router-dom@4.2.2

route = the page the user is going to go to based on the URL


the web use to work like this -> click link to go to new document = changing url in the browser -> this issues a new request for some new webpage (HTML page) from a server.
BUT...
react router -> intercepts changes to the url, it stops the user from navigating to a diff page and display a diff set of component on the screen based on the URL.

single page app - no longer navigating distinct HTML pages, but dealing with one html document but relying on the javascript to change the set of component that is rendered on the screen.

bug - seeing both components when we go to a new route
when we specify a route property, it is fuzzily matched against the route ( loose matching )
solution - use the react-router-dom { Switch } component
it matches the FIRST route inside the switch list that matches the current URL

with a Link tag, we use to="" so we navigate to that component when the user clicks on the button. difference is that the Link tag prevents the default behavior around the traditional anchor tag.

{...field.input} is some fancy JSX that has pre-generated events like onInputchange, etc

WRAP UP
- made use of react router dom, the browser router and the switch for the idea of navigation. we created separate route for each components and tied each of those components to a particular path. whenever the user navigates to one of these paths, it will show particular component. WE ARE NOT CHANGING HTML documents, but hiding and showing diff sets of react components. a route can have a wildcard by using ':nameOfWildCard'. we used it inside postShow component because we cared about what particular post id they are looking at.
- react router with action creators. passing around callbacks with our action creators to navigate after the action is completed
- made use of the ownProps system with mapStateToProps. the second argument to mapStateToProps is the set of props that is going to the target component. it does intermediate level of calculations.
- inside our reducer, we made use of mapKeys helper to treat state object as an object instead of array. faster and easy lookup of records, maintaing and fetching records over and over again much more straight foward. ex - fetching individual post, easy to take existing state and add in additional record, if we keep going back to same post, the existing post is overwritten. for example, go to post 5 and revisting post 5 updates our state object versus array b/c we cannot update it but do mroe manual work such as find it, remove it, and add it back into the array.